using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
public abstract class ValidationAtrribute : System.Attribute
{
    public string ErrorMessage { get; set; }

    public abstract bool IsValid(object value);


}

public class RequiredAttribute : ValidationAtrribute
{
    public override bool IsValid(object value)
    {
        return value != null;
    }
}

public class RangeAttribute : ValidationAtrribute
{
    private int start;
    private int end;

    public RangeAttribute(int start, int end)
    {
        this.start = start;
        this.end = end;
    }

    public override bool IsValid(object value)
    {
        if (value == null || !int.TryParse(value.ToString(), out int intvalue))
            return false;

        return intvalue >= start && intvalue <= end;
    }
}

public class MaxLengthAttribute : ValidationAtrribute
{
    private int maxlen;

    public MaxLengthAttribute(int maxlen)
    {
        this.maxlen = maxlen;
    }

    public override bool IsValid(object value)
    {
        if(value == null)
            return false;

        int intvalue = value.ToString().Length;
        return intvalue <= maxlen;
    }
}
class Device
{

    [Required(ErrorMessage = "ID Property Requires Value")]

    public string Id { get; set; }
    [Range(10, 100, ErrorMessage = "Code Value Must Be Within 10-100")]
    public int Code { get; set; }

    [MaxLength(100, ErrorMessage = "Max of 100 Charcters are allowed")]
    public string Description { get; set; }

}

class ObjectValidator
{

    public static bool Validate(Device deviceobj, out List<string> errorList)
    {
        errorList = new List<string>();
        
        System.Type type = deviceobj.GetType();
        System.Reflection.PropertyInfo[] properties = type.GetProperties();
        foreach (System.Reflection.PropertyInfo property in properties)
        {
            Object[] customAttributes = property.GetCustomAttributes(typeof(ValidationAtrribute), true);
            foreach (Object attribute in customAttributes)
            {
                Object propertyValue = property.GetValue(deviceobj);
                ValidationAtrribute valAttribute = attribute as ValidationAtrribute;    // Down-casting
                if(valAttribute != null)
                {
                    if (!valAttribute.IsValid(propertyValue))
                    {
                        string error = valAttribute.ErrorMessage;
                        errorList.Add($"{error}");
                    }
                }
            }
        }
        return errorList.Count == 0;
    }
}

class Program
{
    static void Main()
    {
        Device deviceObj = new Device();
        List<string> errors;
        bool isValid = ObjectValidator.Validate(deviceObj, out errors);
        if (!isValid)
        {
            foreach (string item in errors)
            {
                System.Console.WriteLine(item);

            }
        }
    }
}
